// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file flexible.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_FLEXIBLE_H_
#define _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_FLEXIBLE_H_


//#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(flexible_SOURCE)
#define flexible_DllAPI __declspec( dllexport )
#else
#define flexible_DllAPI __declspec( dllimport )
#endif // flexible_SOURCE
#else
#define flexible_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define flexible_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace realdds {
    namespace topics {
        namespace raw {
            /*!
             * @brief This class represents the enumeration flexible_data_format defined by the user in the IDL file.
             * @ingroup FLEXIBLE
             */
            enum flexible_data_format : uint32_t
            {
                FLEXIBLE_DATA_JSON,
                FLEXIBLE_DATA_CBOR,
                FLEXIBLE_DATA_CUSTOM
            };
            /*!
             * @brief This class represents the structure flexible defined by the user in the IDL file.
             * @ingroup FLEXIBLE
             */
            class flexible
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport flexible();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~flexible();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object realdds::topics::raw::flexible that will be copied.
                 */
                eProsima_user_DllExport flexible(
                        const flexible& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object realdds::topics::raw::flexible that will be copied.
                 */
                eProsima_user_DllExport flexible(
                        flexible&& x);

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object realdds::topics::raw::flexible that will be copied.
                 */
                eProsima_user_DllExport flexible& operator =(
                        const flexible& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object realdds::topics::raw::flexible that will be copied.
                 */
                eProsima_user_DllExport flexible& operator =(
                        flexible&& x);

                /*!
                 * @brief Comparison operator.
                 * @param x realdds::topics::raw::flexible object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const flexible& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x realdds::topics::raw::flexible object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const flexible& x) const;

                /*!
                 * @brief This function sets a value in member data_format
                 * @param _data_format New value for member data_format
                 */
                eProsima_user_DllExport void data_format(
                        realdds::topics::raw::flexible_data_format _data_format);

                /*!
                 * @brief This function returns the value of member data_format
                 * @return Value of member data_format
                 */
                eProsima_user_DllExport realdds::topics::raw::flexible_data_format data_format() const;

                /*!
                 * @brief This function returns a reference to member data_format
                 * @return Reference to member data_format
                 */
                eProsima_user_DllExport realdds::topics::raw::flexible_data_format& data_format();

                /*!
                 * @brief This function copies the value in member version
                 * @param _version New value to be copied in member version
                 */
                eProsima_user_DllExport void version(
                        const std::array<uint8_t, 4>& _version);

                /*!
                 * @brief This function moves the value in member version
                 * @param _version New value to be moved in member version
                 */
                eProsima_user_DllExport void version(
                        std::array<uint8_t, 4>&& _version);

                /*!
                 * @brief This function returns a constant reference to member version
                 * @return Constant reference to member version
                 */
                eProsima_user_DllExport const std::array<uint8_t, 4>& version() const;

                /*!
                 * @brief This function returns a reference to member version
                 * @return Reference to member version
                 */
                eProsima_user_DllExport std::array<uint8_t, 4>& version();
                /*!
                 * @brief This function copies the value in member data
                 * @param _data New value to be copied in member data
                 */
                eProsima_user_DllExport void data(
                        const std::vector<uint8_t>& _data);

                /*!
                 * @brief This function moves the value in member data
                 * @param _data New value to be moved in member data
                 */
                eProsima_user_DllExport void data(
                        std::vector<uint8_t>&& _data);

                /*!
                 * @brief This function returns a constant reference to member data
                 * @return Constant reference to member data
                 */
                eProsima_user_DllExport const std::vector<uint8_t>& data() const;

                /*!
                 * @brief This function returns a reference to member data
                 * @return Reference to member data
                 */
                eProsima_user_DllExport std::vector<uint8_t>& data();

                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const realdds::topics::raw::flexible& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                realdds::topics::raw::flexible_data_format m_data_format;
                std::array<uint8_t, 4> m_version;
                std::vector<uint8_t> m_data;
            };
        } // namespace raw
    } // namespace topics
} // namespace realdds

#endif // _FAST_DDS_GENERATED_REALDDS_TOPICS_RAW_FLEXIBLE_H_