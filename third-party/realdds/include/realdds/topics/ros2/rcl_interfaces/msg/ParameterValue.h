// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ParameterValue.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERVALUE_H_
#define _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERVALUE_H_


//#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ParameterValue_SOURCE)
#define ParameterValue_DllAPI __declspec( dllexport )
#else
#define ParameterValue_DllAPI __declspec( dllimport )
#endif // ParameterValue_SOURCE
#else
#define ParameterValue_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ParameterValue_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace rcl_interfaces {
    namespace msg {
        /*!
         * @brief This class represents the structure ParameterValue defined by the user in the IDL file.
         * @ingroup PARAMETERVALUE
         */
        class ParameterValue
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ParameterValue();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ParameterValue();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object rcl_interfaces::msg::ParameterValue that will be copied.
             */
            eProsima_user_DllExport ParameterValue(
                    const ParameterValue& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object rcl_interfaces::msg::ParameterValue that will be copied.
             */
            eProsima_user_DllExport ParameterValue(
                    ParameterValue&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object rcl_interfaces::msg::ParameterValue that will be copied.
             */
            eProsima_user_DllExport ParameterValue& operator =(
                    const ParameterValue& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object rcl_interfaces::msg::ParameterValue that will be copied.
             */
            eProsima_user_DllExport ParameterValue& operator =(
                    ParameterValue&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::ParameterValue object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ParameterValue& x) const;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::ParameterValue object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ParameterValue& x) const;

            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            eProsima_user_DllExport void type(
                    uint8_t _type);

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            eProsima_user_DllExport uint8_t type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            eProsima_user_DllExport uint8_t& type();

            /*!
             * @brief This function sets a value in member bool_value
             * @param _bool_value New value for member bool_value
             */
            eProsima_user_DllExport void bool_value(
                    bool _bool_value);

            /*!
             * @brief This function returns the value of member bool_value
             * @return Value of member bool_value
             */
            eProsima_user_DllExport bool bool_value() const;

            /*!
             * @brief This function returns a reference to member bool_value
             * @return Reference to member bool_value
             */
            eProsima_user_DllExport bool& bool_value();

            /*!
             * @brief This function sets a value in member integer_value
             * @param _integer_value New value for member integer_value
             */
            eProsima_user_DllExport void integer_value(
                    int64_t _integer_value);

            /*!
             * @brief This function returns the value of member integer_value
             * @return Value of member integer_value
             */
            eProsima_user_DllExport int64_t integer_value() const;

            /*!
             * @brief This function returns a reference to member integer_value
             * @return Reference to member integer_value
             */
            eProsima_user_DllExport int64_t& integer_value();

            /*!
             * @brief This function sets a value in member double_value
             * @param _double_value New value for member double_value
             */
            eProsima_user_DllExport void double_value(
                    double _double_value);

            /*!
             * @brief This function returns the value of member double_value
             * @return Value of member double_value
             */
            eProsima_user_DllExport double double_value() const;

            /*!
             * @brief This function returns a reference to member double_value
             * @return Reference to member double_value
             */
            eProsima_user_DllExport double& double_value();

            /*!
             * @brief This function copies the value in member string_value
             * @param _string_value New value to be copied in member string_value
             */
            eProsima_user_DllExport void string_value(
                    const std::string& _string_value);

            /*!
             * @brief This function moves the value in member string_value
             * @param _string_value New value to be moved in member string_value
             */
            eProsima_user_DllExport void string_value(
                    std::string&& _string_value);

            /*!
             * @brief This function returns a constant reference to member string_value
             * @return Constant reference to member string_value
             */
            eProsima_user_DllExport const std::string& string_value() const;

            /*!
             * @brief This function returns a reference to member string_value
             * @return Reference to member string_value
             */
            eProsima_user_DllExport std::string& string_value();
            /*!
             * @brief This function copies the value in member byte_array_value
             * @param _byte_array_value New value to be copied in member byte_array_value
             */
            eProsima_user_DllExport void byte_array_value(
                    const std::vector<uint8_t>& _byte_array_value);

            /*!
             * @brief This function moves the value in member byte_array_value
             * @param _byte_array_value New value to be moved in member byte_array_value
             */
            eProsima_user_DllExport void byte_array_value(
                    std::vector<uint8_t>&& _byte_array_value);

            /*!
             * @brief This function returns a constant reference to member byte_array_value
             * @return Constant reference to member byte_array_value
             */
            eProsima_user_DllExport const std::vector<uint8_t>& byte_array_value() const;

            /*!
             * @brief This function returns a reference to member byte_array_value
             * @return Reference to member byte_array_value
             */
            eProsima_user_DllExport std::vector<uint8_t>& byte_array_value();
            /*!
             * @brief This function copies the value in member bool_array_value
             * @param _bool_array_value New value to be copied in member bool_array_value
             */
            eProsima_user_DllExport void bool_array_value(
                    const std::vector<bool>& _bool_array_value);

            /*!
             * @brief This function moves the value in member bool_array_value
             * @param _bool_array_value New value to be moved in member bool_array_value
             */
            eProsima_user_DllExport void bool_array_value(
                    std::vector<bool>&& _bool_array_value);

            /*!
             * @brief This function returns a constant reference to member bool_array_value
             * @return Constant reference to member bool_array_value
             */
            eProsima_user_DllExport const std::vector<bool>& bool_array_value() const;

            /*!
             * @brief This function returns a reference to member bool_array_value
             * @return Reference to member bool_array_value
             */
            eProsima_user_DllExport std::vector<bool>& bool_array_value();
            /*!
             * @brief This function copies the value in member integer_array_value
             * @param _integer_array_value New value to be copied in member integer_array_value
             */
            eProsima_user_DllExport void integer_array_value(
                    const std::vector<int64_t>& _integer_array_value);

            /*!
             * @brief This function moves the value in member integer_array_value
             * @param _integer_array_value New value to be moved in member integer_array_value
             */
            eProsima_user_DllExport void integer_array_value(
                    std::vector<int64_t>&& _integer_array_value);

            /*!
             * @brief This function returns a constant reference to member integer_array_value
             * @return Constant reference to member integer_array_value
             */
            eProsima_user_DllExport const std::vector<int64_t>& integer_array_value() const;

            /*!
             * @brief This function returns a reference to member integer_array_value
             * @return Reference to member integer_array_value
             */
            eProsima_user_DllExport std::vector<int64_t>& integer_array_value();
            /*!
             * @brief This function copies the value in member double_array_value
             * @param _double_array_value New value to be copied in member double_array_value
             */
            eProsima_user_DllExport void double_array_value(
                    const std::vector<double>& _double_array_value);

            /*!
             * @brief This function moves the value in member double_array_value
             * @param _double_array_value New value to be moved in member double_array_value
             */
            eProsima_user_DllExport void double_array_value(
                    std::vector<double>&& _double_array_value);

            /*!
             * @brief This function returns a constant reference to member double_array_value
             * @return Constant reference to member double_array_value
             */
            eProsima_user_DllExport const std::vector<double>& double_array_value() const;

            /*!
             * @brief This function returns a reference to member double_array_value
             * @return Reference to member double_array_value
             */
            eProsima_user_DllExport std::vector<double>& double_array_value();
            /*!
             * @brief This function copies the value in member string_array_value
             * @param _string_array_value New value to be copied in member string_array_value
             */
            eProsima_user_DllExport void string_array_value(
                    const std::vector<std::string>& _string_array_value);

            /*!
             * @brief This function moves the value in member string_array_value
             * @param _string_array_value New value to be moved in member string_array_value
             */
            eProsima_user_DllExport void string_array_value(
                    std::vector<std::string>&& _string_array_value);

            /*!
             * @brief This function returns a constant reference to member string_array_value
             * @return Constant reference to member string_array_value
             */
            eProsima_user_DllExport const std::vector<std::string>& string_array_value() const;

            /*!
             * @brief This function returns a reference to member string_array_value
             * @return Reference to member string_array_value
             */
            eProsima_user_DllExport std::vector<std::string>& string_array_value();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const rcl_interfaces::msg::ParameterValue& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            uint8_t m_type;
            bool m_bool_value;
            int64_t m_integer_value;
            double m_double_value;
            std::string m_string_value;
            std::vector<uint8_t> m_byte_array_value;
            std::vector<bool> m_bool_array_value;
            std::vector<int64_t> m_integer_array_value;
            std::vector<double> m_double_array_value;
            std::vector<std::string> m_string_array_value;
        };
    } // namespace msg
} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERVALUE_H_
