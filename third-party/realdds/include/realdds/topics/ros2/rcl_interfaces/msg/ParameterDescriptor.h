// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ParameterDescriptor.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERDESCRIPTOR_H_
#define _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERDESCRIPTOR_H_

#include "FloatingPointRange.h"
#include "IntegerRange.h"

//#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ParameterDescriptor_SOURCE)
#define ParameterDescriptor_DllAPI __declspec( dllexport )
#else
#define ParameterDescriptor_DllAPI __declspec( dllimport )
#endif // ParameterDescriptor_SOURCE
#else
#define ParameterDescriptor_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ParameterDescriptor_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace rcl_interfaces {
    namespace msg {
        /*!
         * @brief This class represents the structure ParameterDescriptor defined by the user in the IDL file.
         * @ingroup PARAMETERDESCRIPTOR
         */
        class ParameterDescriptor
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ParameterDescriptor();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ParameterDescriptor();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object rcl_interfaces::msg::ParameterDescriptor that will be copied.
             */
            eProsima_user_DllExport ParameterDescriptor(
                    const ParameterDescriptor& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object rcl_interfaces::msg::ParameterDescriptor that will be copied.
             */
            eProsima_user_DllExport ParameterDescriptor(
                    ParameterDescriptor&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object rcl_interfaces::msg::ParameterDescriptor that will be copied.
             */
            eProsima_user_DllExport ParameterDescriptor& operator =(
                    const ParameterDescriptor& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object rcl_interfaces::msg::ParameterDescriptor that will be copied.
             */
            eProsima_user_DllExport ParameterDescriptor& operator =(
                    ParameterDescriptor&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::ParameterDescriptor object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ParameterDescriptor& x) const;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::msg::ParameterDescriptor object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ParameterDescriptor& x) const;

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();
            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            eProsima_user_DllExport void type(
                    uint8_t _type);

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            eProsima_user_DllExport uint8_t type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            eProsima_user_DllExport uint8_t& type();

            /*!
             * @brief This function copies the value in member description
             * @param _description New value to be copied in member description
             */
            eProsima_user_DllExport void description(
                    const std::string& _description);

            /*!
             * @brief This function moves the value in member description
             * @param _description New value to be moved in member description
             */
            eProsima_user_DllExport void description(
                    std::string&& _description);

            /*!
             * @brief This function returns a constant reference to member description
             * @return Constant reference to member description
             */
            eProsima_user_DllExport const std::string& description() const;

            /*!
             * @brief This function returns a reference to member description
             * @return Reference to member description
             */
            eProsima_user_DllExport std::string& description();
            /*!
             * @brief This function copies the value in member additional_constraints
             * @param _additional_constraints New value to be copied in member additional_constraints
             */
            eProsima_user_DllExport void additional_constraints(
                    const std::string& _additional_constraints);

            /*!
             * @brief This function moves the value in member additional_constraints
             * @param _additional_constraints New value to be moved in member additional_constraints
             */
            eProsima_user_DllExport void additional_constraints(
                    std::string&& _additional_constraints);

            /*!
             * @brief This function returns a constant reference to member additional_constraints
             * @return Constant reference to member additional_constraints
             */
            eProsima_user_DllExport const std::string& additional_constraints() const;

            /*!
             * @brief This function returns a reference to member additional_constraints
             * @return Reference to member additional_constraints
             */
            eProsima_user_DllExport std::string& additional_constraints();
            /*!
             * @brief This function sets a value in member read_only
             * @param _read_only New value for member read_only
             */
            eProsima_user_DllExport void read_only(
                    bool _read_only);

            /*!
             * @brief This function returns the value of member read_only
             * @return Value of member read_only
             */
            eProsima_user_DllExport bool read_only() const;

            /*!
             * @brief This function returns a reference to member read_only
             * @return Reference to member read_only
             */
            eProsima_user_DllExport bool& read_only();

            /*!
             * @brief This function sets a value in member dynamic_typing
             * @param _dynamic_typing New value for member dynamic_typing
             */
            eProsima_user_DllExport void dynamic_typing(
                    bool _dynamic_typing);

            /*!
             * @brief This function returns the value of member dynamic_typing
             * @return Value of member dynamic_typing
             */
            eProsima_user_DllExport bool dynamic_typing() const;

            /*!
             * @brief This function returns a reference to member dynamic_typing
             * @return Reference to member dynamic_typing
             */
            eProsima_user_DllExport bool& dynamic_typing();

            /*!
             * @brief This function copies the value in member floating_point_range
             * @param _floating_point_range New value to be copied in member floating_point_range
             */
            eProsima_user_DllExport void floating_point_range(
                    const std::vector<rcl_interfaces::msg::FloatingPointRange>& _floating_point_range);

            /*!
             * @brief This function moves the value in member floating_point_range
             * @param _floating_point_range New value to be moved in member floating_point_range
             */
            eProsima_user_DllExport void floating_point_range(
                    std::vector<rcl_interfaces::msg::FloatingPointRange>&& _floating_point_range);

            /*!
             * @brief This function returns a constant reference to member floating_point_range
             * @return Constant reference to member floating_point_range
             */
            eProsima_user_DllExport const std::vector<rcl_interfaces::msg::FloatingPointRange>& floating_point_range() const;

            /*!
             * @brief This function returns a reference to member floating_point_range
             * @return Reference to member floating_point_range
             */
            eProsima_user_DllExport std::vector<rcl_interfaces::msg::FloatingPointRange>& floating_point_range();
            /*!
             * @brief This function copies the value in member integer_range
             * @param _integer_range New value to be copied in member integer_range
             */
            eProsima_user_DllExport void integer_range(
                    const std::vector<rcl_interfaces::msg::IntegerRange>& _integer_range);

            /*!
             * @brief This function moves the value in member integer_range
             * @param _integer_range New value to be moved in member integer_range
             */
            eProsima_user_DllExport void integer_range(
                    std::vector<rcl_interfaces::msg::IntegerRange>&& _integer_range);

            /*!
             * @brief This function returns a constant reference to member integer_range
             * @return Constant reference to member integer_range
             */
            eProsima_user_DllExport const std::vector<rcl_interfaces::msg::IntegerRange>& integer_range() const;

            /*!
             * @brief This function returns a reference to member integer_range
             * @return Reference to member integer_range
             */
            eProsima_user_DllExport std::vector<rcl_interfaces::msg::IntegerRange>& integer_range();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const rcl_interfaces::msg::ParameterDescriptor& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_name;
            uint8_t m_type;
            std::string m_description;
            std::string m_additional_constraints;
            bool m_read_only;
            bool m_dynamic_typing;
            std::vector<rcl_interfaces::msg::FloatingPointRange> m_floating_point_range;
            std::vector<rcl_interfaces::msg::IntegerRange> m_integer_range;
        };
    } // namespace msg
} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_MSG_PARAMETERDESCRIPTOR_H_
