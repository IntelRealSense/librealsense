// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ListParameters.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_RCL_INTERFACES_SRV_LISTPARAMETERS_H_
#define _FAST_DDS_GENERATED_RCL_INTERFACES_SRV_LISTPARAMETERS_H_

#include "../msg/ListParametersResult.h"

//#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ListParameters_SOURCE)
#define ListParameters_DllAPI __declspec( dllexport )
#else
#define ListParameters_DllAPI __declspec( dllimport )
#endif // ListParameters_SOURCE
#else
#define ListParameters_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ListParameters_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace rcl_interfaces {
    namespace srv {
        namespace ListParameters_Request_Constants {
            const uint64_t DEPTH_RECURSIVE = 0;
        } // namespace ListParameters_Request_Constants
        /*!
         * @brief This class represents the structure ListParameters_Request defined by the user in the IDL file.
         * @ingroup LISTPARAMETERS
         */
        class ListParameters_Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ListParameters_Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ListParameters_Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Request that will be copied.
             */
            eProsima_user_DllExport ListParameters_Request(
                    const ListParameters_Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Request that will be copied.
             */
            eProsima_user_DllExport ListParameters_Request(
                    ListParameters_Request&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Request that will be copied.
             */
            eProsima_user_DllExport ListParameters_Request& operator =(
                    const ListParameters_Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Request that will be copied.
             */
            eProsima_user_DllExport ListParameters_Request& operator =(
                    ListParameters_Request&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::srv::ListParameters_Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ListParameters_Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::srv::ListParameters_Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ListParameters_Request& x) const;

            /*!
             * @brief This function copies the value in member prefixes
             * @param _prefixes New value to be copied in member prefixes
             */
            eProsima_user_DllExport void prefixes(
                    const std::vector<std::string>& _prefixes);

            /*!
             * @brief This function moves the value in member prefixes
             * @param _prefixes New value to be moved in member prefixes
             */
            eProsima_user_DllExport void prefixes(
                    std::vector<std::string>&& _prefixes);

            /*!
             * @brief This function returns a constant reference to member prefixes
             * @return Constant reference to member prefixes
             */
            eProsima_user_DllExport const std::vector<std::string>& prefixes() const;

            /*!
             * @brief This function returns a reference to member prefixes
             * @return Reference to member prefixes
             */
            eProsima_user_DllExport std::vector<std::string>& prefixes();
            /*!
             * @brief This function sets a value in member depth
             * @param _depth New value for member depth
             */
            eProsima_user_DllExport void depth(
                    uint64_t _depth);

            /*!
             * @brief This function returns the value of member depth
             * @return Value of member depth
             */
            eProsima_user_DllExport uint64_t depth() const;

            /*!
             * @brief This function returns a reference to member depth
             * @return Reference to member depth
             */
            eProsima_user_DllExport uint64_t& depth();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const rcl_interfaces::srv::ListParameters_Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::vector<std::string> m_prefixes;
            uint64_t m_depth;
        };
        /*!
         * @brief This class represents the structure ListParameters_Response defined by the user in the IDL file.
         * @ingroup LISTPARAMETERS
         */
        class ListParameters_Response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport ListParameters_Response();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~ListParameters_Response();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Response that will be copied.
             */
            eProsima_user_DllExport ListParameters_Response(
                    const ListParameters_Response& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Response that will be copied.
             */
            eProsima_user_DllExport ListParameters_Response(
                    ListParameters_Response&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Response that will be copied.
             */
            eProsima_user_DllExport ListParameters_Response& operator =(
                    const ListParameters_Response& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object rcl_interfaces::srv::ListParameters_Response that will be copied.
             */
            eProsima_user_DllExport ListParameters_Response& operator =(
                    ListParameters_Response&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::srv::ListParameters_Response object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const ListParameters_Response& x) const;

            /*!
             * @brief Comparison operator.
             * @param x rcl_interfaces::srv::ListParameters_Response object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const ListParameters_Response& x) const;

            /*!
             * @brief This function copies the value in member result
             * @param _result New value to be copied in member result
             */
            eProsima_user_DllExport void result(
                    const rcl_interfaces::msg::ListParametersResult& _result);

            /*!
             * @brief This function moves the value in member result
             * @param _result New value to be moved in member result
             */
            eProsima_user_DllExport void result(
                    rcl_interfaces::msg::ListParametersResult&& _result);

            /*!
             * @brief This function returns a constant reference to member result
             * @return Constant reference to member result
             */
            eProsima_user_DllExport const rcl_interfaces::msg::ListParametersResult& result() const;

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            eProsima_user_DllExport rcl_interfaces::msg::ListParametersResult& result();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const rcl_interfaces::srv::ListParameters_Response& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            rcl_interfaces::msg::ListParametersResult m_result;
        };
    } // namespace srv
} // namespace rcl_interfaces

#endif // _FAST_DDS_GENERATED_RCL_INTERFACES_SRV_LISTPARAMETERS_H_
