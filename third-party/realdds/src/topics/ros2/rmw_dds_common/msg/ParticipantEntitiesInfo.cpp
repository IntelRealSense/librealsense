// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ParticipantEntitiesInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/ros2/rmw_dds_common/msg/ParticipantEntitiesInfo.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rmw_dds_common::msg::ParticipantEntitiesInfo::ParticipantEntitiesInfo()
{
    // m_gid com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@8646db9

    // m_node_entities_info_seq com.eprosima.idl.parser.typecode.SequenceTypeCode@4671e53b


}

rmw_dds_common::msg::ParticipantEntitiesInfo::~ParticipantEntitiesInfo()
{


}

rmw_dds_common::msg::ParticipantEntitiesInfo::ParticipantEntitiesInfo(
        const ParticipantEntitiesInfo& x)
{
    m_gid = x.m_gid;
    m_node_entities_info_seq = x.m_node_entities_info_seq;
}

rmw_dds_common::msg::ParticipantEntitiesInfo::ParticipantEntitiesInfo(
        ParticipantEntitiesInfo&& x) noexcept 
{
    m_gid = std::move(x.m_gid);
    m_node_entities_info_seq = std::move(x.m_node_entities_info_seq);
}

rmw_dds_common::msg::ParticipantEntitiesInfo& rmw_dds_common::msg::ParticipantEntitiesInfo::operator =(
        const ParticipantEntitiesInfo& x)
{

    m_gid = x.m_gid;
    m_node_entities_info_seq = x.m_node_entities_info_seq;

    return *this;
}

rmw_dds_common::msg::ParticipantEntitiesInfo& rmw_dds_common::msg::ParticipantEntitiesInfo::operator =(
        ParticipantEntitiesInfo&& x) noexcept
{

    m_gid = std::move(x.m_gid);
    m_node_entities_info_seq = std::move(x.m_node_entities_info_seq);

    return *this;
}

bool rmw_dds_common::msg::ParticipantEntitiesInfo::operator ==(
        const ParticipantEntitiesInfo& x) const
{

    return (m_gid == x.m_gid && m_node_entities_info_seq == x.m_node_entities_info_seq);
}

bool rmw_dds_common::msg::ParticipantEntitiesInfo::operator !=(
        const ParticipantEntitiesInfo& x) const
{
    return !(*this == x);
}

size_t rmw_dds_common::msg::ParticipantEntitiesInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += rmw_dds_common::msg::Gid::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rmw_dds_common::msg::NodeEntitiesInfo::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t rmw_dds_common::msg::ParticipantEntitiesInfo::getCdrSerializedSize(
        const rmw_dds_common::msg::ParticipantEntitiesInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += rmw_dds_common::msg::Gid::getCdrSerializedSize(data.gid(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.node_entities_info_seq().size(); ++a)
    {
        current_alignment += rmw_dds_common::msg::NodeEntitiesInfo::getCdrSerializedSize(data.node_entities_info_seq().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void rmw_dds_common::msg::ParticipantEntitiesInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_gid;
    scdr << m_node_entities_info_seq;

}

void rmw_dds_common::msg::ParticipantEntitiesInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_gid;
    dcdr >> m_node_entities_info_seq;
}

/*!
 * @brief This function copies the value in member gid
 * @param _gid New value to be copied in member gid
 */
void rmw_dds_common::msg::ParticipantEntitiesInfo::gid(
        const rmw_dds_common::msg::Gid& _gid)
{
    m_gid = _gid;
}

/*!
 * @brief This function moves the value in member gid
 * @param _gid New value to be moved in member gid
 */
void rmw_dds_common::msg::ParticipantEntitiesInfo::gid(
        rmw_dds_common::msg::Gid&& _gid)
{
    m_gid = std::move(_gid);
}

/*!
 * @brief This function returns a constant reference to member gid
 * @return Constant reference to member gid
 */
const rmw_dds_common::msg::Gid& rmw_dds_common::msg::ParticipantEntitiesInfo::gid() const
{
    return m_gid;
}

/*!
 * @brief This function returns a reference to member gid
 * @return Reference to member gid
 */
rmw_dds_common::msg::Gid& rmw_dds_common::msg::ParticipantEntitiesInfo::gid()
{
    return m_gid;
}
/*!
 * @brief This function copies the value in member node_entities_info_seq
 * @param _node_entities_info_seq New value to be copied in member node_entities_info_seq
 */
void rmw_dds_common::msg::ParticipantEntitiesInfo::node_entities_info_seq(
        const std::vector<rmw_dds_common::msg::NodeEntitiesInfo>& _node_entities_info_seq)
{
    m_node_entities_info_seq = _node_entities_info_seq;
}

/*!
 * @brief This function moves the value in member node_entities_info_seq
 * @param _node_entities_info_seq New value to be moved in member node_entities_info_seq
 */
void rmw_dds_common::msg::ParticipantEntitiesInfo::node_entities_info_seq(
        std::vector<rmw_dds_common::msg::NodeEntitiesInfo>&& _node_entities_info_seq)
{
    m_node_entities_info_seq = std::move(_node_entities_info_seq);
}

/*!
 * @brief This function returns a constant reference to member node_entities_info_seq
 * @return Constant reference to member node_entities_info_seq
 */
const std::vector<rmw_dds_common::msg::NodeEntitiesInfo>& rmw_dds_common::msg::ParticipantEntitiesInfo::node_entities_info_seq() const
{
    return m_node_entities_info_seq;
}

/*!
 * @brief This function returns a reference to member node_entities_info_seq
 * @return Reference to member node_entities_info_seq
 */
std::vector<rmw_dds_common::msg::NodeEntitiesInfo>& rmw_dds_common::msg::ParticipantEntitiesInfo::node_entities_info_seq()
{
    return m_node_entities_info_seq;
}

size_t rmw_dds_common::msg::ParticipantEntitiesInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool rmw_dds_common::msg::ParticipantEntitiesInfo::isKeyDefined()
{
    return false;
}

void rmw_dds_common::msg::ParticipantEntitiesInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


