// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file Gid.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/ros2/rmw_dds_common/msg/Gid.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rmw_dds_common::msg::Gid::Gid()
{
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@319b92f3
    memset(&m_data, 0, (24) * 1);

}

rmw_dds_common::msg::Gid::~Gid()
{
}

rmw_dds_common::msg::Gid::Gid(
        const Gid& x)
{
    m_data = x.m_data;
}

rmw_dds_common::msg::Gid::Gid(
        Gid&& x) noexcept 
{
    m_data = std::move(x.m_data);
}

rmw_dds_common::msg::Gid& rmw_dds_common::msg::Gid::operator =(
        const Gid& x)
{

    m_data = x.m_data;

    return *this;
}

rmw_dds_common::msg::Gid& rmw_dds_common::msg::Gid::operator =(
        Gid&& x) noexcept
{

    m_data = std::move(x.m_data);

    return *this;
}

bool rmw_dds_common::msg::Gid::operator ==(
        const Gid& x) const
{

    return (m_data == x.m_data);
}

bool rmw_dds_common::msg::Gid::operator !=(
        const Gid& x) const
{
    return !(*this == x);
}

size_t rmw_dds_common::msg::Gid::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ((24) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t rmw_dds_common::msg::Gid::getCdrSerializedSize(
        const rmw_dds_common::msg::Gid& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    if ((24) > 0)
    {
        current_alignment += ((24) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void rmw_dds_common::msg::Gid::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_data;


}

void rmw_dds_common::msg::Gid::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_data;

}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void rmw_dds_common::msg::Gid::data(
        const std::array<uint8_t, 24>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void rmw_dds_common::msg::Gid::data(
        std::array<uint8_t, 24>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<uint8_t, 24>& rmw_dds_common::msg::Gid::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<uint8_t, 24>& rmw_dds_common::msg::Gid::data()
{
    return m_data;
}

size_t rmw_dds_common::msg::Gid::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rmw_dds_common::msg::Gid::isKeyDefined()
{
    return false;
}

void rmw_dds_common::msg::Gid::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


