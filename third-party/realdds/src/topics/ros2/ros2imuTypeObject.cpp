// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2023 Intel Corporation. All Rights Reserved.

/*!
 * @file ImuTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include <realdds/topics/ros2/ros2imu.h>
#include "ros2imuTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerImuTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("geometry_msgs::msg::Quaternion", geometry_msgs::msg::GetQuaternionIdentifier(true),
            geometry_msgs::msg::GetQuaternionObject(true));
    factory->add_type_object("geometry_msgs::msg::Quaternion", geometry_msgs::msg::GetQuaternionIdentifier(false),
            geometry_msgs::msg::GetQuaternionObject(false));



    factory->add_type_object("geometry_msgs::msg::Vector3", geometry_msgs::msg::GetVector3Identifier(true),
            geometry_msgs::msg::GetVector3Object(true));
    factory->add_type_object("geometry_msgs::msg::Vector3", geometry_msgs::msg::GetVector3Identifier(false),
            geometry_msgs::msg::GetVector3Object(false));



    factory->add_type_object("std_msgs::msg::Time", std_msgs::msg::GetTimeIdentifier(true),
            std_msgs::msg::GetTimeObject(true));
    factory->add_type_object("std_msgs::msg::Time", std_msgs::msg::GetTimeIdentifier(false),
            std_msgs::msg::GetTimeObject(false));



    factory->add_type_object("std_msgs::msg::Header", std_msgs::msg::GetHeaderIdentifier(true),
            std_msgs::msg::GetHeaderObject(true));
    factory->add_type_object("std_msgs::msg::Header", std_msgs::msg::GetHeaderIdentifier(false),
            std_msgs::msg::GetHeaderObject(false));



    factory->add_type_object("sensor_msgs::msg::sensor_msgs__Imu__double_array_9", sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(true),
            sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Object(true));
    factory->add_type_object("sensor_msgs::msg::sensor_msgs__Imu__double_array_9", sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(false),
            sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Object(false));

    factory->add_type_object("sensor_msgs::msg::Imu", sensor_msgs::msg::GetImuIdentifier(true),
            sensor_msgs::msg::GetImuObject(true));
    factory->add_type_object("sensor_msgs::msg::Imu", sensor_msgs::msg::GetImuIdentifier(false),
            sensor_msgs::msg::GetImuObject(false));



}

namespace sensor_msgs {
    namespace msg {
        const TypeIdentifier* Getsensor_msgs__Imu__double_array_9Identifier(bool complete)
        {
            const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("sensor_msgs__Imu__double_array_9", complete);
            if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
            {
                return c_identifier;
            }

            Getsensor_msgs__Imu__double_array_9Object(complete); // Generated inside
            return TypeObjectFactory::get_instance()->get_type_identifier("sensor_msgs__Imu__double_array_9", complete);
        }

        const TypeObject* Getsensor_msgs__Imu__double_array_9Object(bool complete)
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("sensor_msgs__Imu__double_array_9", complete);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }
            else if (complete)
            {
                return GetCompletesensor_msgs__Imu__double_array_9Object();
            }
            else
            {
                return GetMinimalsensor_msgs__Imu__double_array_9Object();
            }
        }

        const TypeObject* GetMinimalsensor_msgs__Imu__double_array_9Object()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("sensor_msgs__Imu__double_array_9", false);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_MINIMAL);
            type_object->minimal()._d(TK_ALIAS);

            // No flags apply
            //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
            //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
            //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
            //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
            //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

            // type_object->minimal().alias_type().header()... Is empty

            // No flags apply
            //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
            //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
            //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
            //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
            //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
            //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
            //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

            // Must be defined already, if don't, may be an recursive alias
            const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_array_type_name("double", {9}), false);


            if (relatedType != nullptr)
            {
                type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
            }
            else
            {
                // Cannot determine base type
                delete type_object;
                return nullptr;
            }

            TypeIdentifier identifier;
            identifier._d(EK_MINIMAL);

            SerializedPayload_t payload(static_cast<uint32_t>(
                MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            // Don't add our TypeIdentifier but our alias
            TypeObjectFactory::get_instance()->add_alias("sensor_msgs__Imu__double_array_9", TypeNamesGenerator::get_array_type_name("double", {9}));

            TypeObjectFactory::get_instance()->add_type_object("sensor_msgs__Imu__double_array_9", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("sensor_msgs__Imu__double_array_9", false);
        }

        const TypeObject* GetCompletesensor_msgs__Imu__double_array_9Object()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("sensor_msgs__Imu__double_array_9", true);
            if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_COMPLETE);
            type_object->complete()._d(TK_ALIAS);

            // No flags apply
            //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
            //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
            //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
            //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
            //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

            //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
            //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
            //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
            //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
            type_object->complete().alias_type().header().detail().type_name("sensor_msgs__Imu__double_array_9");

            // No flags apply
            //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
            //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
            //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
            //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
            //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
            //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
            //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

            //type_object->complete().alias_type().body().common().ann_builtin()
            //type_object->complete().alias_type().body().common().ann_custom()

            // Must be defined already, if don't, may be an recursive alias
            const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_array_type_name("double", {9}));


            if (relatedType != nullptr)
            {
                type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
            }
            else
            {
                // Cannot determine base type
                delete type_object;
                return nullptr;
            }

            TypeIdentifier identifier;
            identifier._d(EK_COMPLETE);

            SerializedPayload_t payload(static_cast<uint32_t>(
                CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            // Don't add our TypeIdentifier but our alias
            TypeObjectFactory::get_instance()->add_alias("sensor_msgs__Imu__double_array_9", TypeNamesGenerator::get_array_type_name("double", {9}));

            TypeObjectFactory::get_instance()->add_type_object("sensor_msgs__Imu__double_array_9", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("sensor_msgs__Imu__double_array_9", true);
        }

        const TypeIdentifier* GetImuIdentifier(bool complete)
        {
            const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Imu", complete);
            if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
            {
                return c_identifier;
            }

            GetImuObject(complete); // Generated inside
            return TypeObjectFactory::get_instance()->get_type_identifier("Imu", complete);
        }

        const TypeObject* GetImuObject(bool complete)
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Imu", complete);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }
            else if (complete)
            {
                return GetCompleteImuObject();
            }
            //else
            return GetMinimalImuObject();
        }

        const TypeObject* GetMinimalImuObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Imu", false);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_MINIMAL);
            type_object->minimal()._d(TK_STRUCTURE);

            type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
            type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
            type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            MinimalStructMember mst_header;
            mst_header.common().member_id(memberId++);
            mst_header.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_header.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_header.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_header.common().member_flags().IS_OPTIONAL(false);
            mst_header.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_header.common().member_flags().IS_KEY(false);
            mst_header.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_header.common().member_type_id(*std_msgs::msg::GetHeaderIdentifier(false));
            MD5 header_hash("header");
            for(int i = 0; i < 4; ++i)
            {
                mst_header.detail().name_hash()[i] = header_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_header);

            MinimalStructMember mst_orientation;
            mst_orientation.common().member_id(memberId++);
            mst_orientation.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_orientation.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_orientation.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_orientation.common().member_flags().IS_OPTIONAL(false);
            mst_orientation.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_orientation.common().member_flags().IS_KEY(false);
            mst_orientation.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_orientation.common().member_type_id(*geometry_msgs::msg::GetQuaternionIdentifier(false));
            MD5 orientation_hash("orientation");
            for(int i = 0; i < 4; ++i)
            {
                mst_orientation.detail().name_hash()[i] = orientation_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_orientation);

            MinimalStructMember mst_orientation_covariance;
            mst_orientation_covariance.common().member_id(memberId++);
            mst_orientation_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_orientation_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_orientation_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_orientation_covariance.common().member_flags().IS_OPTIONAL(false);
            mst_orientation_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_orientation_covariance.common().member_flags().IS_KEY(false);
            mst_orientation_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_orientation_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(false));
            MD5 orientation_covariance_hash("orientation_covariance");
            for(int i = 0; i < 4; ++i)
            {
                mst_orientation_covariance.detail().name_hash()[i] = orientation_covariance_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_orientation_covariance);

            MinimalStructMember mst_angular_velocity;
            mst_angular_velocity.common().member_id(memberId++);
            mst_angular_velocity.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_angular_velocity.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_angular_velocity.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_angular_velocity.common().member_flags().IS_OPTIONAL(false);
            mst_angular_velocity.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_angular_velocity.common().member_flags().IS_KEY(false);
            mst_angular_velocity.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_angular_velocity.common().member_type_id(*geometry_msgs::msg::GetVector3Identifier(false));
            MD5 angular_velocity_hash("angular_velocity");
            for(int i = 0; i < 4; ++i)
            {
                mst_angular_velocity.detail().name_hash()[i] = angular_velocity_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_angular_velocity);

            MinimalStructMember mst_angular_velocity_covariance;
            mst_angular_velocity_covariance.common().member_id(memberId++);
            mst_angular_velocity_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_angular_velocity_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_angular_velocity_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_angular_velocity_covariance.common().member_flags().IS_OPTIONAL(false);
            mst_angular_velocity_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_angular_velocity_covariance.common().member_flags().IS_KEY(false);
            mst_angular_velocity_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_angular_velocity_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(false));
            MD5 angular_velocity_covariance_hash("angular_velocity_covariance");
            for(int i = 0; i < 4; ++i)
            {
                mst_angular_velocity_covariance.detail().name_hash()[i] = angular_velocity_covariance_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_angular_velocity_covariance);

            MinimalStructMember mst_linear_acceleration;
            mst_linear_acceleration.common().member_id(memberId++);
            mst_linear_acceleration.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_linear_acceleration.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_linear_acceleration.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_linear_acceleration.common().member_flags().IS_OPTIONAL(false);
            mst_linear_acceleration.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_linear_acceleration.common().member_flags().IS_KEY(false);
            mst_linear_acceleration.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_linear_acceleration.common().member_type_id(*geometry_msgs::msg::GetVector3Identifier(false));
            MD5 linear_acceleration_hash("linear_acceleration");
            for(int i = 0; i < 4; ++i)
            {
                mst_linear_acceleration.detail().name_hash()[i] = linear_acceleration_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_linear_acceleration);

            MinimalStructMember mst_linear_acceleration_covariance;
            mst_linear_acceleration_covariance.common().member_id(memberId++);
            mst_linear_acceleration_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_linear_acceleration_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_linear_acceleration_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_linear_acceleration_covariance.common().member_flags().IS_OPTIONAL(false);
            mst_linear_acceleration_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_linear_acceleration_covariance.common().member_flags().IS_KEY(false);
            mst_linear_acceleration_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_linear_acceleration_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(false));
            MD5 linear_acceleration_covariance_hash("linear_acceleration_covariance");
            for(int i = 0; i < 4; ++i)
            {
                mst_linear_acceleration_covariance.detail().name_hash()[i] = linear_acceleration_covariance_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_linear_acceleration_covariance);


            // Header
            // TODO Inheritance
            //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
            //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

            TypeIdentifier identifier;
            identifier._d(EK_MINIMAL);

            SerializedPayload_t payload(static_cast<uint32_t>(
                MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("Imu", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("Imu", false);
        }

        const TypeObject* GetCompleteImuObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Imu", true);
            if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_COMPLETE);
            type_object->complete()._d(TK_STRUCTURE);

            type_object->complete().struct_type().struct_flags().IS_FINAL(false);
            type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->complete().struct_type().struct_flags().IS_NESTED(false);
            type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            CompleteStructMember cst_header;
            cst_header.common().member_id(memberId++);
            cst_header.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_header.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_header.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_header.common().member_flags().IS_OPTIONAL(false);
            cst_header.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_header.common().member_flags().IS_KEY(false);
            cst_header.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_header.common().member_type_id(*std_msgs::msg::GetHeaderIdentifier(true));
            cst_header.detail().name("header");

            type_object->complete().struct_type().member_seq().emplace_back(cst_header);

            CompleteStructMember cst_orientation;
            cst_orientation.common().member_id(memberId++);
            cst_orientation.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_orientation.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_orientation.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_orientation.common().member_flags().IS_OPTIONAL(false);
            cst_orientation.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_orientation.common().member_flags().IS_KEY(false);
            cst_orientation.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_orientation.common().member_type_id(*geometry_msgs::msg::GetQuaternionIdentifier(true));
            cst_orientation.detail().name("orientation");

            type_object->complete().struct_type().member_seq().emplace_back(cst_orientation);

            CompleteStructMember cst_orientation_covariance;
            cst_orientation_covariance.common().member_id(memberId++);
            cst_orientation_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_orientation_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_orientation_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_orientation_covariance.common().member_flags().IS_OPTIONAL(false);
            cst_orientation_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_orientation_covariance.common().member_flags().IS_KEY(false);
            cst_orientation_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_orientation_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(true));
            cst_orientation_covariance.detail().name("orientation_covariance");

            type_object->complete().struct_type().member_seq().emplace_back(cst_orientation_covariance);

            CompleteStructMember cst_angular_velocity;
            cst_angular_velocity.common().member_id(memberId++);
            cst_angular_velocity.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_angular_velocity.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_angular_velocity.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_angular_velocity.common().member_flags().IS_OPTIONAL(false);
            cst_angular_velocity.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_angular_velocity.common().member_flags().IS_KEY(false);
            cst_angular_velocity.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_angular_velocity.common().member_type_id(*geometry_msgs::msg::GetVector3Identifier(true));
            cst_angular_velocity.detail().name("angular_velocity");

            type_object->complete().struct_type().member_seq().emplace_back(cst_angular_velocity);

            CompleteStructMember cst_angular_velocity_covariance;
            cst_angular_velocity_covariance.common().member_id(memberId++);
            cst_angular_velocity_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_angular_velocity_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_angular_velocity_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_angular_velocity_covariance.common().member_flags().IS_OPTIONAL(false);
            cst_angular_velocity_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_angular_velocity_covariance.common().member_flags().IS_KEY(false);
            cst_angular_velocity_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_angular_velocity_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(true));
            cst_angular_velocity_covariance.detail().name("angular_velocity_covariance");

            type_object->complete().struct_type().member_seq().emplace_back(cst_angular_velocity_covariance);

            CompleteStructMember cst_linear_acceleration;
            cst_linear_acceleration.common().member_id(memberId++);
            cst_linear_acceleration.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_linear_acceleration.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_linear_acceleration.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_linear_acceleration.common().member_flags().IS_OPTIONAL(false);
            cst_linear_acceleration.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_linear_acceleration.common().member_flags().IS_KEY(false);
            cst_linear_acceleration.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_linear_acceleration.common().member_type_id(*geometry_msgs::msg::GetVector3Identifier(true));
            cst_linear_acceleration.detail().name("linear_acceleration");

            type_object->complete().struct_type().member_seq().emplace_back(cst_linear_acceleration);

            CompleteStructMember cst_linear_acceleration_covariance;
            cst_linear_acceleration_covariance.common().member_id(memberId++);
            cst_linear_acceleration_covariance.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_linear_acceleration_covariance.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_linear_acceleration_covariance.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_linear_acceleration_covariance.common().member_flags().IS_OPTIONAL(false);
            cst_linear_acceleration_covariance.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_linear_acceleration_covariance.common().member_flags().IS_KEY(false);
            cst_linear_acceleration_covariance.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_linear_acceleration_covariance.common().member_type_id(*sensor_msgs::msg::Getsensor_msgs__Imu__double_array_9Identifier(true));
            cst_linear_acceleration_covariance.detail().name("linear_acceleration_covariance");

            type_object->complete().struct_type().member_seq().emplace_back(cst_linear_acceleration_covariance);


            // Header
            type_object->complete().struct_type().header().detail().type_name("Imu");
            // TODO inheritance


            TypeIdentifier identifier;
            identifier._d(EK_COMPLETE);

            SerializedPayload_t payload(static_cast<uint32_t>(
                CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("Imu", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("Imu", true);
        }

    } // namespace msg
} // namespace sensor_msgs