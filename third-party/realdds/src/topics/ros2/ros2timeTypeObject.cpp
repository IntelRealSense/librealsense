// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2023 Intel Corporation. All Rights Reserved.

/*!
 * @file TimeTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include <realdds/topics/ros2/ros2time.h>
#include "ros2timeTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerTimeTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("std_msgs::msg::Time", std_msgs::msg::GetTimeIdentifier(true),
            std_msgs::msg::GetTimeObject(true));
    factory->add_type_object("std_msgs::msg::Time", std_msgs::msg::GetTimeIdentifier(false),
            std_msgs::msg::GetTimeObject(false));



}

namespace std_msgs {
    namespace msg {
        const TypeIdentifier* GetTimeIdentifier(bool complete)
        {
            const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Time", complete);
            if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
            {
                return c_identifier;
            }

            GetTimeObject(complete); // Generated inside
            return TypeObjectFactory::get_instance()->get_type_identifier("Time", complete);
        }

        const TypeObject* GetTimeObject(bool complete)
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Time", complete);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }
            else if (complete)
            {
                return GetCompleteTimeObject();
            }
            //else
            return GetMinimalTimeObject();
        }

        const TypeObject* GetMinimalTimeObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Time", false);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_MINIMAL);
            type_object->minimal()._d(TK_STRUCTURE);

            type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
            type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_NESTED(true);
            type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            MinimalStructMember mst_sec;
            mst_sec.common().member_id(memberId++);
            mst_sec.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_sec.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_sec.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_sec.common().member_flags().IS_OPTIONAL(false);
            mst_sec.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_sec.common().member_flags().IS_KEY(false);
            mst_sec.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_sec.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

            MD5 sec_hash("sec");
            for(int i = 0; i < 4; ++i)
            {
                mst_sec.detail().name_hash()[i] = sec_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_sec);

            MinimalStructMember mst_nanosec;
            mst_nanosec.common().member_id(memberId++);
            mst_nanosec.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_nanosec.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_nanosec.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_nanosec.common().member_flags().IS_OPTIONAL(false);
            mst_nanosec.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_nanosec.common().member_flags().IS_KEY(false);
            mst_nanosec.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_nanosec.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

            MD5 nanosec_hash("nanosec");
            for(int i = 0; i < 4; ++i)
            {
                mst_nanosec.detail().name_hash()[i] = nanosec_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_nanosec);


            // Header
            // TODO Inheritance
            //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
            //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

            TypeIdentifier identifier;
            identifier._d(EK_MINIMAL);

            SerializedPayload_t payload(static_cast<uint32_t>(
                MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("Time", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("Time", false);
        }

        const TypeObject* GetCompleteTimeObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Time", true);
            if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_COMPLETE);
            type_object->complete()._d(TK_STRUCTURE);

            type_object->complete().struct_type().struct_flags().IS_FINAL(false);
            type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->complete().struct_type().struct_flags().IS_NESTED(true);
            type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            CompleteStructMember cst_sec;
            cst_sec.common().member_id(memberId++);
            cst_sec.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_sec.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_sec.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_sec.common().member_flags().IS_OPTIONAL(false);
            cst_sec.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_sec.common().member_flags().IS_KEY(false);
            cst_sec.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_sec.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

            cst_sec.detail().name("sec");

            type_object->complete().struct_type().member_seq().emplace_back(cst_sec);

            CompleteStructMember cst_nanosec;
            cst_nanosec.common().member_id(memberId++);
            cst_nanosec.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_nanosec.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_nanosec.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_nanosec.common().member_flags().IS_OPTIONAL(false);
            cst_nanosec.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_nanosec.common().member_flags().IS_KEY(false);
            cst_nanosec.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_nanosec.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

            cst_nanosec.detail().name("nanosec");

            type_object->complete().struct_type().member_seq().emplace_back(cst_nanosec);


            // Header
            type_object->complete().struct_type().header().detail().type_name("Time");
            // TODO inheritance

            {
                AppliedAnnotation ann;
                //ann.annotation_typeid(GetnestedIdentifier(true));
                ann.annotation_typeid(*TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("nested"));
                {
                    AppliedAnnotationParameter annParam;
                    MD5 message_hash("value");
                    for(int i = 0; i < 4; ++i)
                    {
                        annParam.paramname_hash()[i] = message_hash.digest[i];
                    }
                    AnnotationParameterValue paramValue;
                    paramValue._d(TK_BOOLEAN);
                    paramValue.from_string("true");
                    annParam.value(paramValue);
                    ann.param_seq().push_back(annParam);
                }
                    
                type_object->complete().struct_type().header().detail().ann_custom().push_back(ann);
            }
                

            TypeIdentifier identifier;
            identifier._d(EK_COMPLETE);

            SerializedPayload_t payload(static_cast<uint32_t>(
                CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("Time", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("Time", true);
        }

    } // namespace msg
} // namespace std_msgs