// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file GetParameters.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/ros2/rcl_interfaces/srv/GetParameters.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rcl_interfaces::srv::GetParameters_Request::GetParameters_Request()
{
    // m_names com.eprosima.idl.parser.typecode.SequenceTypeCode@32eebfca


}

rcl_interfaces::srv::GetParameters_Request::~GetParameters_Request()
{
}

rcl_interfaces::srv::GetParameters_Request::GetParameters_Request(
        const GetParameters_Request& x)
{
    m_names = x.m_names;
}

rcl_interfaces::srv::GetParameters_Request::GetParameters_Request(
        GetParameters_Request&& x) noexcept 
{
    m_names = std::move(x.m_names);
}

rcl_interfaces::srv::GetParameters_Request& rcl_interfaces::srv::GetParameters_Request::operator =(
        const GetParameters_Request& x)
{

    m_names = x.m_names;

    return *this;
}

rcl_interfaces::srv::GetParameters_Request& rcl_interfaces::srv::GetParameters_Request::operator =(
        GetParameters_Request&& x) noexcept
{

    m_names = std::move(x.m_names);

    return *this;
}

bool rcl_interfaces::srv::GetParameters_Request::operator ==(
        const GetParameters_Request& x) const
{

    return (m_names == x.m_names);
}

bool rcl_interfaces::srv::GetParameters_Request::operator !=(
        const GetParameters_Request& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::GetParameters_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }
    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::GetParameters_Request::getCdrSerializedSize(
        const rcl_interfaces::srv::GetParameters_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.names().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.names().at(a).size() + 1;
    }
    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::GetParameters_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_names;
}

void rcl_interfaces::srv::GetParameters_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_names;}

/*!
 * @brief This function copies the value in member names
 * @param _names New value to be copied in member names
 */
void rcl_interfaces::srv::GetParameters_Request::names(
        const std::vector<std::string>& _names)
{
    m_names = _names;
}

/*!
 * @brief This function moves the value in member names
 * @param _names New value to be moved in member names
 */
void rcl_interfaces::srv::GetParameters_Request::names(
        std::vector<std::string>&& _names)
{
    m_names = std::move(_names);
}

/*!
 * @brief This function returns a constant reference to member names
 * @return Constant reference to member names
 */
const std::vector<std::string>& rcl_interfaces::srv::GetParameters_Request::names() const
{
    return m_names;
}

/*!
 * @brief This function returns a reference to member names
 * @return Reference to member names
 */
std::vector<std::string>& rcl_interfaces::srv::GetParameters_Request::names()
{
    return m_names;
}

size_t rcl_interfaces::srv::GetParameters_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::GetParameters_Request::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::GetParameters_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

rcl_interfaces::srv::GetParameters_Response::GetParameters_Response()
{
    // m_values com.eprosima.idl.parser.typecode.SequenceTypeCode@4fcd19b3


}

rcl_interfaces::srv::GetParameters_Response::~GetParameters_Response()
{
}

rcl_interfaces::srv::GetParameters_Response::GetParameters_Response(
        const GetParameters_Response& x)
{
    m_values = x.m_values;
}

rcl_interfaces::srv::GetParameters_Response::GetParameters_Response(
        GetParameters_Response&& x) noexcept 
{
    m_values = std::move(x.m_values);
}

rcl_interfaces::srv::GetParameters_Response& rcl_interfaces::srv::GetParameters_Response::operator =(
        const GetParameters_Response& x)
{

    m_values = x.m_values;

    return *this;
}

rcl_interfaces::srv::GetParameters_Response& rcl_interfaces::srv::GetParameters_Response::operator =(
        GetParameters_Response&& x) noexcept
{

    m_values = std::move(x.m_values);

    return *this;
}

bool rcl_interfaces::srv::GetParameters_Response::operator ==(
        const GetParameters_Response& x) const
{

    return (m_values == x.m_values);
}

bool rcl_interfaces::srv::GetParameters_Response::operator !=(
        const GetParameters_Response& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::srv::GetParameters_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterValue::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::srv::GetParameters_Response::getCdrSerializedSize(
        const rcl_interfaces::srv::GetParameters_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.values().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::ParameterValue::getCdrSerializedSize(data.values().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void rcl_interfaces::srv::GetParameters_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_values;
}

void rcl_interfaces::srv::GetParameters_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_values;}

/*!
 * @brief This function copies the value in member values
 * @param _values New value to be copied in member values
 */
void rcl_interfaces::srv::GetParameters_Response::values(
        const std::vector<rcl_interfaces::msg::ParameterValue>& _values)
{
    m_values = _values;
}

/*!
 * @brief This function moves the value in member values
 * @param _values New value to be moved in member values
 */
void rcl_interfaces::srv::GetParameters_Response::values(
        std::vector<rcl_interfaces::msg::ParameterValue>&& _values)
{
    m_values = std::move(_values);
}

/*!
 * @brief This function returns a constant reference to member values
 * @return Constant reference to member values
 */
const std::vector<rcl_interfaces::msg::ParameterValue>& rcl_interfaces::srv::GetParameters_Response::values() const
{
    return m_values;
}

/*!
 * @brief This function returns a reference to member values
 * @return Reference to member values
 */
std::vector<rcl_interfaces::msg::ParameterValue>& rcl_interfaces::srv::GetParameters_Response::values()
{
    return m_values;
}

size_t rcl_interfaces::srv::GetParameters_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::srv::GetParameters_Response::isKeyDefined()
{
    return false;
}

void rcl_interfaces::srv::GetParameters_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


