// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ParameterType.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/ros2/rcl_interfaces/msg/ParameterType.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>












rcl_interfaces::msg::ParameterType::ParameterType()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4d3167f4
    m_structure_needs_at_least_one_member = 0;

}

rcl_interfaces::msg::ParameterType::~ParameterType()
{
}

rcl_interfaces::msg::ParameterType::ParameterType(
        const ParameterType& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

rcl_interfaces::msg::ParameterType::ParameterType(
        ParameterType&& x) noexcept 
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

rcl_interfaces::msg::ParameterType& rcl_interfaces::msg::ParameterType::operator =(
        const ParameterType& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

rcl_interfaces::msg::ParameterType& rcl_interfaces::msg::ParameterType::operator =(
        ParameterType&& x) noexcept
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool rcl_interfaces::msg::ParameterType::operator ==(
        const ParameterType& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool rcl_interfaces::msg::ParameterType::operator !=(
        const ParameterType& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::msg::ParameterType::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::msg::ParameterType::getCdrSerializedSize(
        const rcl_interfaces::msg::ParameterType& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void rcl_interfaces::msg::ParameterType::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void rcl_interfaces::msg::ParameterType::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void rcl_interfaces::msg::ParameterType::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t rcl_interfaces::msg::ParameterType::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& rcl_interfaces::msg::ParameterType::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t rcl_interfaces::msg::ParameterType::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool rcl_interfaces::msg::ParameterType::isKeyDefined()
{
    return false;
}

void rcl_interfaces::msg::ParameterType::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


