// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2025 Intel Corporation. All Rights Reserved.

/*!
 * @file ParameterEvent.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/ros2/rcl_interfaces/msg/ParameterEvent.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

rcl_interfaces::msg::ParameterEvent::ParameterEvent()
{
    // m_stamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@7ee955a8

    // m_node com.eprosima.idl.parser.typecode.StringTypeCode@1677d1
    m_node ="";
    // m_new_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@48fa0f47

    // m_changed_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@6ac13091

    // m_deleted_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@5e316c74


}

rcl_interfaces::msg::ParameterEvent::~ParameterEvent()
{





}

rcl_interfaces::msg::ParameterEvent::ParameterEvent(
        const ParameterEvent& x)
{
    m_stamp = x.m_stamp;
    m_node = x.m_node;
    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;
}

rcl_interfaces::msg::ParameterEvent::ParameterEvent(
        ParameterEvent&& x) noexcept 
{
    m_stamp = std::move(x.m_stamp);
    m_node = std::move(x.m_node);
    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);
}

rcl_interfaces::msg::ParameterEvent& rcl_interfaces::msg::ParameterEvent::operator =(
        const ParameterEvent& x)
{

    m_stamp = x.m_stamp;
    m_node = x.m_node;
    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;

    return *this;
}

rcl_interfaces::msg::ParameterEvent& rcl_interfaces::msg::ParameterEvent::operator =(
        ParameterEvent&& x) noexcept
{

    m_stamp = std::move(x.m_stamp);
    m_node = std::move(x.m_node);
    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);

    return *this;
}

bool rcl_interfaces::msg::ParameterEvent::operator ==(
        const ParameterEvent& x) const
{

    return (m_stamp == x.m_stamp && m_node == x.m_node && m_new_parameters == x.m_new_parameters && m_changed_parameters == x.m_changed_parameters && m_deleted_parameters == x.m_deleted_parameters);
}

bool rcl_interfaces::msg::ParameterEvent::operator !=(
        const ParameterEvent& x) const
{
    return !(*this == x);
}

size_t rcl_interfaces::msg::ParameterEvent::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t rcl_interfaces::msg::ParameterEvent::getCdrSerializedSize(
        const rcl_interfaces::msg::ParameterEvent& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.node().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.new_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getCdrSerializedSize(data.new_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.changed_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getCdrSerializedSize(data.changed_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.deleted_parameters().size(); ++a)
    {
        current_alignment += rcl_interfaces::msg::Parameter::getCdrSerializedSize(data.deleted_parameters().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void rcl_interfaces::msg::ParameterEvent::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stamp;
    scdr << m_node.c_str();
    scdr << m_new_parameters;
    scdr << m_changed_parameters;
    scdr << m_deleted_parameters;

}

void rcl_interfaces::msg::ParameterEvent::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stamp;
    dcdr >> m_node;
    dcdr >> m_new_parameters;
    dcdr >> m_changed_parameters;
    dcdr >> m_deleted_parameters;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void rcl_interfaces::msg::ParameterEvent::stamp(
        const builtin_interfaces::msg::Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void rcl_interfaces::msg::ParameterEvent::stamp(
        builtin_interfaces::msg::Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::Time& rcl_interfaces::msg::ParameterEvent::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::Time& rcl_interfaces::msg::ParameterEvent::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member node
 * @param _node New value to be copied in member node
 */
void rcl_interfaces::msg::ParameterEvent::node(
        const std::string& _node)
{
    m_node = _node;
}

/*!
 * @brief This function moves the value in member node
 * @param _node New value to be moved in member node
 */
void rcl_interfaces::msg::ParameterEvent::node(
        std::string&& _node)
{
    m_node = std::move(_node);
}

/*!
 * @brief This function returns a constant reference to member node
 * @return Constant reference to member node
 */
const std::string& rcl_interfaces::msg::ParameterEvent::node() const
{
    return m_node;
}

/*!
 * @brief This function returns a reference to member node
 * @return Reference to member node
 */
std::string& rcl_interfaces::msg::ParameterEvent::node()
{
    return m_node;
}
/*!
 * @brief This function copies the value in member new_parameters
 * @param _new_parameters New value to be copied in member new_parameters
 */
void rcl_interfaces::msg::ParameterEvent::new_parameters(
        const std::vector<rcl_interfaces::msg::Parameter>& _new_parameters)
{
    m_new_parameters = _new_parameters;
}

/*!
 * @brief This function moves the value in member new_parameters
 * @param _new_parameters New value to be moved in member new_parameters
 */
void rcl_interfaces::msg::ParameterEvent::new_parameters(
        std::vector<rcl_interfaces::msg::Parameter>&& _new_parameters)
{
    m_new_parameters = std::move(_new_parameters);
}

/*!
 * @brief This function returns a constant reference to member new_parameters
 * @return Constant reference to member new_parameters
 */
const std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::new_parameters() const
{
    return m_new_parameters;
}

/*!
 * @brief This function returns a reference to member new_parameters
 * @return Reference to member new_parameters
 */
std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::new_parameters()
{
    return m_new_parameters;
}
/*!
 * @brief This function copies the value in member changed_parameters
 * @param _changed_parameters New value to be copied in member changed_parameters
 */
void rcl_interfaces::msg::ParameterEvent::changed_parameters(
        const std::vector<rcl_interfaces::msg::Parameter>& _changed_parameters)
{
    m_changed_parameters = _changed_parameters;
}

/*!
 * @brief This function moves the value in member changed_parameters
 * @param _changed_parameters New value to be moved in member changed_parameters
 */
void rcl_interfaces::msg::ParameterEvent::changed_parameters(
        std::vector<rcl_interfaces::msg::Parameter>&& _changed_parameters)
{
    m_changed_parameters = std::move(_changed_parameters);
}

/*!
 * @brief This function returns a constant reference to member changed_parameters
 * @return Constant reference to member changed_parameters
 */
const std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::changed_parameters() const
{
    return m_changed_parameters;
}

/*!
 * @brief This function returns a reference to member changed_parameters
 * @return Reference to member changed_parameters
 */
std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::changed_parameters()
{
    return m_changed_parameters;
}
/*!
 * @brief This function copies the value in member deleted_parameters
 * @param _deleted_parameters New value to be copied in member deleted_parameters
 */
void rcl_interfaces::msg::ParameterEvent::deleted_parameters(
        const std::vector<rcl_interfaces::msg::Parameter>& _deleted_parameters)
{
    m_deleted_parameters = _deleted_parameters;
}

/*!
 * @brief This function moves the value in member deleted_parameters
 * @param _deleted_parameters New value to be moved in member deleted_parameters
 */
void rcl_interfaces::msg::ParameterEvent::deleted_parameters(
        std::vector<rcl_interfaces::msg::Parameter>&& _deleted_parameters)
{
    m_deleted_parameters = std::move(_deleted_parameters);
}

/*!
 * @brief This function returns a constant reference to member deleted_parameters
 * @return Constant reference to member deleted_parameters
 */
const std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::deleted_parameters() const
{
    return m_deleted_parameters;
}

/*!
 * @brief This function returns a reference to member deleted_parameters
 * @return Reference to member deleted_parameters
 */
std::vector<rcl_interfaces::msg::Parameter>& rcl_interfaces::msg::ParameterEvent::deleted_parameters()
{
    return m_deleted_parameters;
}

size_t rcl_interfaces::msg::ParameterEvent::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool rcl_interfaces::msg::ParameterEvent::isKeyDefined()
{
    return false;
}

void rcl_interfaces::msg::ParameterEvent::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


