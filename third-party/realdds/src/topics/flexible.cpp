// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2022 Intel Corporation. All Rights Reserved.

/*!
 * @file flexible.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <realdds/topics/flexible/flexible.h>
#include "flexibleTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


realdds::topics::raw::flexible::flexible()
{
    // m_data_format com.eprosima.idl.parser.typecode.EnumTypeCode@b7dd107
    m_data_format = realdds::topics::raw::FLEXIBLE_DATA_JSON;
    // m_version com.eprosima.idl.parser.typecode.ArrayTypeCode@42eca56e
    memset(&m_version, 0, (4) * 1);
    // m_data com.eprosima.idl.parser.typecode.SequenceTypeCode@52f759d7


    // Just to register all known types
    registerflexibleTypes();
}

realdds::topics::raw::flexible::~flexible()
{



}

realdds::topics::raw::flexible::flexible(
        const flexible& x)
{
    m_data_format = x.m_data_format;
    m_version = x.m_version;
    m_data = x.m_data;
}

realdds::topics::raw::flexible::flexible(
        flexible&& x)
{
    m_data_format = x.m_data_format;
    m_version = std::move(x.m_version);
    m_data = std::move(x.m_data);
}

realdds::topics::raw::flexible& realdds::topics::raw::flexible::operator =(
        const flexible& x)
{

    m_data_format = x.m_data_format;
    m_version = x.m_version;
    m_data = x.m_data;

    return *this;
}

realdds::topics::raw::flexible& realdds::topics::raw::flexible::operator =(
        flexible&& x)
{

    m_data_format = x.m_data_format;
    m_version = std::move(x.m_version);
    m_data = std::move(x.m_data);

    return *this;
}

bool realdds::topics::raw::flexible::operator ==(
        const flexible& x) const
{

    return (m_data_format == x.m_data_format && m_version == x.m_version && m_data == x.m_data);
}

bool realdds::topics::raw::flexible::operator !=(
        const flexible& x) const
{
    return !(*this == x);
}

size_t realdds::topics::raw::flexible::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (4096 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t realdds::topics::raw::flexible::getCdrSerializedSize(
        const realdds::topics::raw::flexible& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((4) > 0)
    {
        current_alignment += ((4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void realdds::topics::raw::flexible::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_data_format;
    scdr << m_version;

    scdr << m_data;

}

void realdds::topics::raw::flexible::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_data_format = (realdds::topics::raw::flexible_data_format)enum_value;
    }

    dcdr >> m_version;

    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member data_format
 * @param _data_format New value for member data_format
 */
void realdds::topics::raw::flexible::data_format(
        realdds::topics::raw::flexible_data_format _data_format)
{
    m_data_format = _data_format;
}

/*!
 * @brief This function returns the value of member data_format
 * @return Value of member data_format
 */
realdds::topics::raw::flexible_data_format realdds::topics::raw::flexible::data_format() const
{
    return m_data_format;
}

/*!
 * @brief This function returns a reference to member data_format
 * @return Reference to member data_format
 */
realdds::topics::raw::flexible_data_format& realdds::topics::raw::flexible::data_format()
{
    return m_data_format;
}

/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void realdds::topics::raw::flexible::version(
        const std::array<uint8_t, 4>& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void realdds::topics::raw::flexible::version(
        std::array<uint8_t, 4>&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const std::array<uint8_t, 4>& realdds::topics::raw::flexible::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
std::array<uint8_t, 4>& realdds::topics::raw::flexible::version()
{
    return m_version;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void realdds::topics::raw::flexible::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void realdds::topics::raw::flexible::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& realdds::topics::raw::flexible::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& realdds::topics::raw::flexible::data()
{
    return m_data;
}

size_t realdds::topics::raw::flexible::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool realdds::topics::raw::flexible::isKeyDefined()
{
    return false;
}

void realdds::topics::raw::flexible::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}



