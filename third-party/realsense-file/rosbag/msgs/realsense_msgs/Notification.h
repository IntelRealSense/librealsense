// Generated by gencpp from file realsense_msgs/Notification.msg
// DO NOT EDIT!


#ifndef REALSENSE_MSGS_MESSAGE_NOTIFICATION_H
#define REALSENSE_MSGS_MESSAGE_NOTIFICATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_msgs
{
template <class ContainerAllocator>
struct Notification_
{
  typedef Notification_<ContainerAllocator> Type;

  Notification_()
    : timestamp()
    , category()
    , severity()
    , description()
    , serialized_data()  {
    }
  Notification_(const ContainerAllocator& _alloc)
    : timestamp()
    , category(_alloc)
    , severity(_alloc)
    , description(_alloc)
    , serialized_data(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _category_type;
  _category_type category;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _severity_type;
  _severity_type severity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serialized_data_type;
  _serialized_data_type serialized_data;




  typedef std::shared_ptr< ::realsense_msgs::Notification_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::realsense_msgs::Notification_<ContainerAllocator> const> ConstPtr;

}; // struct Notification_

typedef ::realsense_msgs::Notification_<std::allocator<void> > Notification;

typedef std::shared_ptr< ::realsense_msgs::Notification > NotificationPtr;
typedef std::shared_ptr< ::realsense_msgs::Notification const> NotificationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_msgs::Notification_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_msgs::Notification_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'realsense_msgs': ['/home/zivs/Desktop/dev/realsense_msg_generator/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_msgs::Notification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_msgs::Notification_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_msgs::Notification_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_msgs::Notification_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_msgs::Notification_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_msgs::Notification_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_msgs::Notification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdb7a97a510446301f8e6fb67d8cccb0";
  }

  static const char* value(const ::realsense_msgs::Notification_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdb7a97a51044630ULL;
  static const uint64_t static_value2 = 0x1f8e6fb67d8cccb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_msgs::Notification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_msgs/Notification";
  }

  static const char* value(const ::realsense_msgs::Notification_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_msgs::Notification_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines a notification\n\
\n\
time   timestamp          # The time of occurrence \n\
string category           # The category of the notification\n\
string severity           # The severity of the notification\n\
string description        # Human readable description of the notification\n\
string serialized_data     # JSON string with additional data\n\
";
  }

  static const char* value(const ::realsense_msgs::Notification_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_msgs::Notification_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.category);
      stream.next(m.severity);
      stream.next(m.description);
      stream.next(m.serialized_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Notification_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_msgs::Notification_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_msgs::Notification_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "category: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.category);
    s << indent << "severity: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.severity);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "serialized_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serialized_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_MSGS_MESSAGE_NOTIFICATION_H
