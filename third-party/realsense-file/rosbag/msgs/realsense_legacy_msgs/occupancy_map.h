// Generated by gencpp from file realsense_legacy_msgs/occupancy_map.msg
// DO NOT EDIT!


#ifndef realsense_legacy_msgs_MESSAGE_OCCUPANCY_MAP_H
#define realsense_legacy_msgs_MESSAGE_OCCUPANCY_MAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_legacy_msgs
{
template <class ContainerAllocator>
struct occupancy_map_
{
  typedef occupancy_map_<ContainerAllocator> Type;

  occupancy_map_()
    : accuracy(0)
    , reserved(0)
    , tile_count(0)
    , tiles()  {
    }
  occupancy_map_(const ContainerAllocator& _alloc)
    : accuracy(0)
    , reserved(0)
    , tile_count(0)
    , tiles(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _accuracy_type;
  _accuracy_type accuracy;

   typedef int8_t _reserved_type;
  _reserved_type reserved;

   typedef uint16_t _tile_count_type;
  _tile_count_type tile_count;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tiles_type;
  _tiles_type tiles;




  typedef std::shared_ptr< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> const> ConstPtr;

}; // struct occupancy_map_

typedef ::realsense_legacy_msgs::occupancy_map_<std::allocator<void> > occupancy_map;

typedef std::shared_ptr< ::realsense_legacy_msgs::occupancy_map > occupancy_mapPtr;
typedef std::shared_ptr< ::realsense_legacy_msgs::occupancy_map const> occupancy_mapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> & v)
{
rs2rosinternal::message_operations::Printer< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_legacy_msgs

namespace rs2rosinternal
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'realsense_legacy_msgs': ['/home/administrator/realsense_ros_file/realsense_file/realsense_legacy_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1b78aba30e7abd0605079857ac6fbc7";
  }

  static const char* value(const ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1b78aba30e7abd0ULL;
  static const uint64_t static_value2 = 0x605079857ac6fbc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_legacy_msgs/occupancy_map";
  }

  static const char* value(const ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 accuracy\n\
byte reserved\n\
uint16 tile_count\n\
float32[] tiles\n\
";
  }

  static const char* value(const ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace rs2rosinternal

namespace rs2rosinternal
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accuracy);
      stream.next(m.reserved);
      stream.next(m.tile_count);
      stream.next(m.tiles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct occupancy_map_

} // namespace serialization
} // namespace rs2rosinternal

namespace rs2rosinternal
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_legacy_msgs::occupancy_map_<ContainerAllocator>& v)
  {
    s << indent << "accuracy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accuracy);
    s << indent << "reserved: ";
    Printer<int8_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "tile_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tile_count);
    s << indent << "tiles[]" << std::endl;
    for (size_t i = 0; i < v.tiles.size(); ++i)
    {
      s << indent << "  tiles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tiles[i]);
    }
  }
};

} // namespace message_operations
} // namespace rs2rosinternal

#endif // realsense_legacy_msgs_MESSAGE_OCCUPANCY_MAP_H
